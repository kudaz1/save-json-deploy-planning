const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');

/**
 * Cliente que replica exactamente la configuraci√≥n de Postman
 * Ejecuta Control-M desde la m√°quina local igual que en Postman
 */
class PostmanControlMClient {
    
    /**
     * Ejecutar Control-M exactamente como en Postman
     * @param {Object} config - Configuraci√≥n de la petici√≥n
     */
    async executeControlMLikePostman(config) {
        try {
            console.log(`üöÄ Ejecutando Control-M desde cliente local (como Postman)`);
            console.log(`üìç URL: ${config.url}`);
            console.log(`üìÅ Archivo: ${config.filename}`);
            console.log(`üîë Token: ${config.token.substring(0, 10)}...`);

            // Crear el JSON como lo har√≠as en Postman
            const jsonString = JSON.stringify(config.jsonData, null, 2);
            const jsonBuffer = Buffer.from(jsonString, 'utf8');

            // Crear form-data exactamente como en Postman
            const form = new FormData();
            form.append('definitionsFile', jsonBuffer, {
                filename: config.filename,
                contentType: 'application/json'
            });

            // Headers exactamente como en Postman
            const headers = {
                ...form.getHeaders(),
                'Authorization': `Bearer ${config.token}`
            };

            console.log(`üì§ Enviando petici√≥n con form-data...`);

            // Realizar la petici√≥n POST exactamente como en Postman
            const response = await axios.post(config.url, form, {
                headers: headers,
                timeout: 30000,
                // Agregar logs para debug
                onUploadProgress: (progressEvent) => {
                    const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                    console.log(`üìä Progreso: ${percentCompleted}%`);
                }
            });

            console.log(`‚úÖ Control-M ejecutado exitosamente!`);
            console.log(`üìä Status: ${response.status}`);
            console.log(`üìã Response:`, JSON.stringify(response.data, null, 2));

            return {
                success: true,
                status: response.status,
                data: response.data,
                message: 'Control-M ejecutado exitosamente desde cliente local (como Postman)'
            };

        } catch (error) {
            console.error(`‚ùå Error ejecutando Control-M:`, error.message);
            
            if (error.response) {
                console.error(`üìä Status: ${error.response.status}`);
                console.error(`üìã Response:`, JSON.stringify(error.response.data, null, 2));
            }

            return {
                success: false,
                error: error.message,
                status: error.response?.status || 'N/A',
                data: error.response?.data || null,
                message: 'Error ejecutando Control-M desde cliente local'
            };
        }
    }

    /**
     * Funci√≥n completa: llamar a tu API y luego ejecutar Control-M como Postman
     * @param {string} apiUrl - URL de tu API en Railway
     * @param {Object} requestData - Datos para enviar a tu API
     */
    async processLikePostman(apiUrl, requestData) {
        try {
            console.log('üîÑ Paso 1: Llamando a tu API en Railway...');
            
            // Llamar a tu API
            const apiResponse = await axios.post(apiUrl, requestData, {
                headers: {
                    'Content-Type': 'application/json'
                },
                timeout: 30000
            });

            if (!apiResponse.data.success) {
                throw new Error('Tu API retorn√≥ error');
            }

            console.log('‚úÖ Paso 1 completado: API respondi√≥ correctamente');
            console.log('üîÑ Paso 2: Ejecutando Control-M desde cliente local (como Postman)...');

            // Ejecutar Control-M como Postman
            const controlMResult = await this.executeControlMLikePostman(apiResponse.data.controlMInfo);

            console.log('üéâ Proceso completo finalizado!');

            return {
                apiResponse: apiResponse.data,
                controlMResult: controlMResult,
                success: true,
                message: 'Proceso completo ejecutado desde cliente local (como Postman)'
            };

        } catch (error) {
            console.error('‚ùå Error en el proceso completo:', error.message);
            
            return {
                success: false,
                error: error.message,
                message: 'Error en el proceso completo'
            };
        }
    }
}

// Ejemplo de uso - replicando exactamente tu configuraci√≥n de Postman
async function examplePostmanUsage() {
    const client = new PostmanControlMClient();
    
    // Configuraci√≥n exacta como en Postman
    const apiUrl = 'https://tu-url-railway.up.railway.app/save-json';
    const requestData = {
        ambiente: 'DEV',  // o 'QA'
        token: 'tu-bearer-token-aqui',
        filename: 'BORRA-GUI-DESARROLLO_hold_deploy', // Como en tu Postman
        jsonData: {
            // Tu JSON aqu√≠ - exactamente como lo tienes en Postman
            jobType: 'Job',
            application: 'MiApp',
            subApplication: 'SubApp',
            // ... m√°s campos seg√∫n tu JSON
        }
    };

    console.log('üöÄ Iniciando proceso como Postman...');
    const result = await client.processLikePostman(apiUrl, requestData);
    
    console.log('\nüìã RESULTADO FINAL:');
    console.log(JSON.stringify(result, null, 2));
}

// Exportar la clase
module.exports = PostmanControlMClient;

// Ejecutar ejemplo si se llama directamente
if (require.main === module) {
    examplePostmanUsage();
}


